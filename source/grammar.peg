Funky:

        Code    < Element* EOF
        Element < Comment / Import / Assignment / Expression / Unknown

        EOL    <: '\r\n' / '\r' / '\n'
        Whites <: ' ' / '\t' / EOL
        EOF    <: !.

        Spacing <: (Comment / Whites)*
        Comment <: "--" (!EOL !EOF .)* (EOL / EOF)

        List(What) < What ([,] What)*

        Unknown <~ (!EOL .)* EOL

# Imports.

        PathChar   <- [a-zA-Z0-9_.\-]
        ImportPath <~ PathChar+ ('/' PathChar+)*
        Import     <  ;KwordImport ImportPath

# Identifiers.

        NameSpacing  <- (' ' / '\t')*
        ReservedChar <- [-+*%^&@|/()\[\]{}?:.,<>=!~"]
        IdStart      <- !Whites !ReservedChar ![0-9] .
        IdMiddle     <- !Whites !ReservedChar .
        Identifier   <{ stripName } !Keyword ~(;IdStart (NameSpacing? ;IdMiddle)*)

        KwordFalse    <- "false"    !IdMiddle
        KwordImport   <- "import"   !IdMiddle
        KwordInfinity <- "infinity" !IdMiddle
        KwordNaN      <- "NaN"      !IdMiddle
        KwordTrue     <- "true"     !IdMiddle

        Keyword <- KwordFalse
                 / KwordImport
                 / KwordInfinity
                 / KwordNaN
                 / KwordTrue

# Values.

        Digit <- [0-9] NameSpacing?
        NumberLiteral <{ stripNumber } ~(
                Digit+                     # Sequence of digits.
                ('.' Digit+)?              # Optional decimal point.
                ('e' ('+' / '-')? Digit+)? # Optional scientific notation.
        ) / ;KwordInfinity / ;KwordNaN

        BooleanLiteral <- ;KwordTrue / ;KwordFalse

        StringContent <~ (!["] ('\\' ["] / .))*
        StringLiteral <- ["] StringContent ["]

        ArrayContent < List(Expression){ trimOnce }
        ArrayLiteral < '[' ArrayContent? ']'
        ArrayAccess  < (ArrayLiteral / SafeConditional / VagueExpression) '[' ArrayIndexValue ']'
        ArraySlice   < (ArrayLiteral / SafeConditional / VagueExpression) '[' (
                ArrayIndexValue OpRange ArrayIndexValue /
                ArrayIndexValue OpRange                 /
                                OpRange ArrayIndexValue
        ) ']'

        ArrayIndexValue < Arithmetic / Conditional / VagueExpression

        OpConcatenate <- "~"
        JoinableValue < StringLiteral / ArraySlice / ArrayLiteral / SafeConditional / VagueExpression
        Concatenation < JoinableValue (;OpConcatenate Expression)+

        FunctionLiteral      < ('(' ArgumentDeclarations? ')' / Identifier) (':' FunctionLocals)? ;OpReturn Expression
        FunctionCall         < ('(' FunctionLiteral ')' / SafeConditional / VagueExpression) '(' FunctionArguments? ')'
        FunctionLocals       < List(Assignment){ trimOnce }
        ArgumentDeclarations < List(Identifier){ trimOnce }
        FunctionArguments    < List(Expression){ trimOnce }

        OpAccess <- "::"

        ObjectFields      < List(Assignment){ trimOnce }
        ObjectLiteral     < '{' ObjectFields? '}'
        ObjectFieldAccess < (ObjectLiteral / SafeConditional / VagueExpression) ;OpAccess Identifier

        VagueExpression < FunctionCall
                        / ArrayAccess
                        / ObjectFieldAccess
                        / Identifier

        Expression < '(' Expression ')'
              | Arithmetic
              | ArrayLiteral
              | ArraySlice
              | AssignConstant
              | AssignFunction
              | AssignVariable
              | BooleanLiteral
              | Concatenation
              | Conditional
              | FunctionLiteral
              | Logical
              | NumberLiteral
              | ObjectLiteral
              | SafeConditional
              | StringLiteral
              | VagueExpression

# Arithmetic.

        OpSum      <- !"+-" "+" / !"--" "-"
        OpProduct  <- "*" / "/" / "%"
        OpPower    <- "^"

        Arithmetic < Sum
        Sum        < Product (OpSum Product)*
        Product    < Power (OpProduct Power)*
        Power      < Unary (OpPower Unary)*
        Unary      < OpSum? Primary

        Primary < '(' Arithmetic ')'
                | NumberLiteral
                | VagueExpression
                | SafeConditional

# Logical.

        OpNot  <- !"!=" "!"
        OpOr   <- "|"
        OpAnd  <- "&"
        OpXor  <- "@"
        OpIf   <- "?"
        OpElse <- !OpAccess ":"

        Logical < And
        And     < Xor (OpAnd Xor)*
        Xor     < Or  (OpXor Or )*
        Or      < Not (OpOr  Not)*
        Not     < OpNot? Boolean

        Boolean < '(' Logical ')'
                | Comparison
                | BooleanLiteral
                | VagueExpression
                | SafeConditional

        Conditional     < Logical ;OpIf Expression ;OpElse Expression
        SafeConditional < '(' Conditional ')'

# Comparisons.

        OpRange <- "..." / ".."
        OpError <- "+-"
        OpCmp   <- "=" / "!="
                / "<=" / !OpConstant !OpVariable "<"
                / ">=" / ">"

        Range < Arithmetic  OpRange Arithmetic
        Error < Arithmetic ;OpError Arithmetic

        ComparableValue < Arithmetic
                        | Range
                        | Error
                        | !Comparison Logical
                        | '(' Comparison ')'
                        | ArrayLiteral
                        | BooleanLiteral
                        | NumberLiteral
                        | ObjectLiteral
                        | StringLiteral
                        | SafeConditional
                        | VagueExpression

        Comparison < ComparableValue (OpCmp ComparableValue)+

# Assignments.

        OpReturn   <- "->"
        OpVariable <- "<-"
        OpConstant <- "<<"

        Assign(Op) < VagueExpression ;Op Expression

        AssignConstant < Assign(OpConstant)
        AssignVariable < Assign(OpVariable)
        AssignFunction < Identifier FunctionLiteral

        Assignment < AssignConstant
                   / AssignVariable
                   / AssignFunction