== Checks if all elements of given `array` meet the condition specified
== in the `predicate`.
==
== Returns: Boolean
==     True if the array is empty or condition is met by all elements,
==     false otherwise.
all (array, predicate) ->
    array = [] | (predicate (array[0]) & all (array[1...], predicate))

== Checks if any element of given `array` meets the condition specified
== in the `predicate`.
==
== Returns: Boolean
==     True if the condition is met by at least one element, false otherwise
==     or if the array is empty.
any (array, predicate) ->
    array != [] & predicate (array[0]) | any (array[1...], predicate)

== Checks if any element of given `array` meets the condition specified
== in the `predicate`.
==
== Returns: Boolean
==     True if the array is empty or condition is met by no elements, false
==     otherwise.
none (array, predicate) -> !any (array, predicate)

== Makes a new array out of all elements of given `array` that meet the
== condition specified in given `predicate`.
==
== Returns: Array
filter (array, predicate) {
    no elements << array = [],
    appended << !no elements & predicate (array[0]) ? [array[0]] : []
} ->
    no elements ? [] : appended ~ filter (array[1...], predicate)

== Makes a new array out of all elements of given `array` transformed with
== given `process` function.
==
== Returns: Array
map (array, process) ->
    array = [] ? []
               : [process (array[0])] ~ map (array[1...], process)

== Makes a new array of `n` values generated by given `generator`.
==
== Returns: Array
generate (n, generator) ->
    n = 0 ? [] : [generator()] ~ generate (n - 1, generator)